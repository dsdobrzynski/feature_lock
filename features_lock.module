<?php

/**
 * @file
 * Module for locking features/components.
 */

/**
 * Implements hook_kw_manifests_info().
 */
function features_lock_kw_manifests_info() {
  return array(
    'features_lock_components' => array(
      'callback' => 'p2pi_search_main_lock_features',
      'dependencies' => array(
        array(
          'module' => 'drop_ship',
          'name' => 'features_revert',
        )
      )
    ),
  );
}
 
/**
 * Lock features, components, and particular components of features.
 */
function features_lock_main_lock_features() {
  // Get all locks provided by hook_lock_features().
  $all_locks = module_invoke_all('lock_features');

  // Get defaul values.
  $feature_locked =  variable_get('features_feature_locked', array());
  $lock_f = $lock_c = array();

  foreach ($all_locks as $type => $value) {
    switch ($type) {
      // Lock components.
      case 'components':
        foreach ($value as $component) {
          if (is_string($component)) {
            variable_set($component, TRUE);
          }
        }
        break;
      // Get features that should be locked.
      case 'features':
        if (is_array($value) && count($value)) {
          foreach ($value as $feature) {
            $lock_f[$feature] = array('_all' => TRUE);
          }
        }
        break;
      // Get components of feature that should be locked.
      case 'components_of_feature':
        $lock_c =  is_array($value) && count($value) ? $value : array();
        break;
    }
  }

  // Lock features and components of feaures.
  if (count($lock_f + $lock_c)) {
    // Merge new values.
    $new_feature_locked = array_merge_recursive($lock_f,  $lock_c);
    // Merge default values.
    $feature_locked = array_merge($feature_locked, $new_feature_locked);
    variable_set('features_feature_locked', $feature_locked);
  }
}
